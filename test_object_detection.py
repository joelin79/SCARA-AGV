#!/usr/bin/env python3
"""
Test script for SCARA Object Detection System
Demonstrates the complete workflow of workspace scanning and object detection
"""

import os
import sys
import time
from pathlib import Path

# Add Detection_Models to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'Detection_Models'))

def test_object_detection():
    """Test the object detection system"""
    print("=" * 60)
    print("SCARA OBJECT DETECTION SYSTEM TEST")
    print("=" * 60)
    
    try:
        # Import the detection system
        from ObjectDetection import SCARAObjectDetection
        
        print("\n1. Initializing detection system...")
        detector = SCARAObjectDetection(
            model_path="yolo/my_model/my_model.pt",
            confidence_threshold=0.4,
            camera_height=300.0,
            grid_size=3,
            overlap_percentage=0.3
        )
        
        print("\n2. Starting workspace scan...")
        print("   This will move the arm to multiple positions and capture images")
        print("   Press Ctrl+C to stop the scan")
        
        # Perform the detection
        detected_objects = detector.scan_workspace_and_detect_objects(save_images=True)
        detector.detected_objects = detected_objects
        
        print("\n3. Processing results...")
        detector.print_detection_results()
        
        print("\n4. Saving results...")
        detector.save_results_to_file("test_detection_results.json")
        
        print("\n5. Creating visualizations...")
        detector.create_visualization(
            show_3d=True,
            show_top_view=True,
            show_stats=True,
            save_plots=True
        )
        
        # Save coordinates in multiple formats
        coords = detector.get_object_coordinates_list()
        if coords:
            print("\n5. Object coordinates for arm control:")
            print("   Format: (x, y, z) in millimeters")
            for i, (x, y, z) in enumerate(coords):
                print(f"   Object {i+1}: ({x:.1f}, {y:.1f}, {z:.1f})")
            
            # Save as text file
            with open("object_coordinates.txt", "w") as f:
                f.write("# Object coordinates in SCARA arm coordinate system (mm)\n")
                f.write("# Format: x, y, z\n")
                for i, (x, y, z) in enumerate(coords):
                    f.write(f"{x:.1f}, {y:.1f}, {z:.1f}  # Object {i+1}\n")
            
            # Save as Python list
            with open("object_coordinates.py", "w") as f:
                f.write("# Object coordinates for SCARA arm\n")
                f.write("# Automatically generated by ObjectDetection system\n\n")
                f.write("object_coordinates = [\n")
                for x, y, z in coords:
                    f.write(f"    ({x:.1f}, {y:.1f}, {z:.1f}),\n")
                f.write("]\n")
        
        print("\n6. Test completed successfully!")
        print("   Files created:")
        print("   - test_detection_results.json (detailed results)")
        print("   - object_coordinates.txt (human readable)")
        print("   - object_coordinates.py (Python import)")
        print("   - detections_output/ (captured images)")
        print("   - 3d_objects_plot.png (3D visualization)")
        print("   - top_view_plot.png (2D top view)")
        print("   - statistics_plot.png (statistics)")
        
    except KeyboardInterrupt:
        print("\n\nTest interrupted by user (Ctrl+C)")
        print("Partial results may be available in detections_output/")
        
    except ImportError as e:
        print(f"\nImport error: {e}")
        print("Make sure all required packages are installed:")
        print("  pip install ultralytics opencv-python pyrealsense2 numpy")
        
    except FileNotFoundError as e:
        print(f"\nFile not found: {e}")
        print("Make sure the YOLO model file exists at: yolo/my_model/my_model.pt")
        
    except Exception as e:
        print(f"\nUnexpected error: {e}")
        print("Check the error message above for details")


def test_without_camera():
    """Test the system without camera hardware (simulation mode)"""
    print("=" * 60)
    print("SCARA OBJECT DETECTION SYSTEM - SIMULATION MODE")
    print("=" * 60)
    
    try:
        # Create a mock camera class for testing
        class MockCamera:
            def __init__(self):
                print("Mock camera initialized")
            
            def get_frame(self):
                # Return mock images
                import numpy as np
                color_image = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
                depth_image = np.random.randint(100, 500, (480, 640), dtype=np.uint16)
                return True, depth_image, color_image
            
            def release(self):
                print("Mock camera released")
        
        # Patch the camera import
        import Detection_Models.ObjectDetection as od
        od.DepthCamera = MockCamera
        
        # Import the detection system
        from Detection_Models.ObjectDetection import SCARAObjectDetection
        
        print("\n1. Initializing detection system in simulation mode...")
        detector = SCARAObjectDetection(
            model_path="yolo/my_model/my_model.pt",
            confidence_threshold=0.4,
            camera_height=300.0,
            grid_size=2,  # Smaller grid for testing
            overlap_percentage=0.3
        )
        
        print("\n2. Running simulation scan...")
        detected_objects = detector.scan_workspace_and_detect_objects(save_images=False)
        detector.detected_objects = detected_objects
        
        print("\n3. Simulation results:")
        detector.print_detection_results()
        
        print("\n4. Simulation completed!")
        print("   This demonstrates the system workflow without hardware")
        
    except Exception as e:
        print(f"\nSimulation error: {e}")


if __name__ == "__main__":
    print("Choose test mode:")
    print("1. Full test (requires camera and model)")
    print("2. Simulation test (no hardware required)")
    
    try:
        choice = input("Enter choice (1 or 2): ").strip()
        
        if choice == "1":
            test_object_detection()
        elif choice == "2":
            test_without_camera()
        else:
            print("Invalid choice. Running simulation test...")
            test_without_camera()
            
    except KeyboardInterrupt:
        print("\nTest cancelled by user")
    except Exception as e:
        print(f"Error: {e}")
        print("Running simulation test as fallback...")
        test_without_camera() 